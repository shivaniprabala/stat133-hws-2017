position,
salary,
points,
ppg,
rookie
)
player <- c('Thompson', 'Curry', 'Green', 'Durant', 'Pachulia')
position <- c('SG', 'PG', 'PF', 'SF', 'C')
salary <- c(16663575, 12112359, 15330435, 26540100, 2898000)
points <- c(1742, 1999, 776, 1555, 426)
ppg <- c(22.3, 25.3, 10.2, 25.1, 6.1)
rookie <- rep(FALSE, 5)
df1 <- data.frame(
player,
position,
salary,
points,
ppg,
rookie
)
class(df1)
is.list(df1)
df3 <- data.frame(
player = player,
position = position,
salary = salary,
points = as.integer(points),
ppg = ppg,
rookie = rookie,
stringsAsFactors = FALSE
)
df3$position <- as.factor(df3$position)
str(df3)
df4 <- cbind(
player,
position,
salary,
points,
ppg,
rookie
)
class(df4)
# Title: "Lab 3: Data Frame Basics"
# Subtitle: "Stat 133, Fall 2017"
# Author: "Gaston Sanchez"
# ===============================================
# Creating data frames
# ===============================================
# Start by creating vectors for each of the columns.
player <- c('Thompson', 'Curry', 'Green', 'Durant', 'Pachulia')
position <- c('SG', 'PG', 'PF', 'SF', 'C')
salary <- c(16663575, 12112359, 15330435, 26540100, 2898000)
points <- c(1742, 1999, 776, 1555, 426)
ppg <- c(22.3, 25.3, 10.2, 25.1, 6.1)
rookie <- rep(FALSE, 5)
# Create a first data frame with `data.frame()`.
df1 <- data.frame(
player,
position,
salary,
points,
ppg,
rookie
)
# Check that this data frame is of class `"data.frame"`,
# and that it is also a list.
class(df1)
is.list(df1)
# Create another data frame by first starting with a `list()`,
# and then passing the list to `data.frame()`.
variables_list <- list(
player = player,
position = position,
salary = salary,
points = points,
ppg = ppg,
rookie = rookie
)
df2 <- data.frame(variables_list)
# What would you do to obtain a data frame such that when
# you check its structure `str()` the variables are:
# - _Player_ as character
# - _Position_ as factor
# - _Salary_ as numeric or real (ignore the commas)
# - _Points_ as integer
# - _PPG_ as numeric or real
# - _Rookie_ as logical
df3 <- data.frame(
player = player,
position = position,
salary = salary,
points = as.integer(points),
ppg = ppg,
rookie = rookie,
stringsAsFactors = FALSE
)
df3$position <- as.factor(df3$position)
str(df3)
# Find out how to use the _column binding_ function `cbind()` to create a
# tabular object (see what is the class of this object) with your vectors.
df4 <- cbind(
player,
position,
salary,
points,
ppg,
rookie
)
class(df4)
?"=<"
? "=<"
?less than or equal
?less than
?"less than"
# - How many players are from "University of California, Berkeley"?
sum(dat$college == "University of California, Berkeley")
# - How many players are from "University of Notre Dame"?
sum(dat$college == "University of Notre Dame")
# import data (assuming file is in your working dir)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
# import data (assuming file is in your working dir)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
?aggregate
a data frame with the minimum salary, median salary,
# mean salary, and maximum salary, grouped by team and position.
salary_by_tp <- aggregate(
dat$salary, by = list(team = dat$team),
FUN = function(x) c(min = min(x), med = median(x), avg = mean(x), max = max(x)))
library(readr)
dataset <- read_csv(NULL)
View(dataset)
load(/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
getwd()
../
eqjpfqjw
getwd()
setwd(Desktop)
setwd(/Users/shivaniprabala/Desktop)
setwd(Users/shivaniprabala/Desktop)
setwd(../Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
setwd(/../Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
getwd()
load(../Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
?setwd
setwd(Desktop )
setwd(shivaniprabala)
setwd(../)
setwd(Users)
setwd
setwd("../Desktop")
getwd()
setwd("../")
getwd()
load(/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
setwd("/Desktop")
setwd("Desktop")
getwd()
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(stat133/stat133-fall-2017/data/nba2017-players.csv)
load("stat133/stat133-fall-2017/data/nba2017-players.csv")
load("/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv")
load("Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv")
load("stat133/stat133-fall-2017/data/nba2017-players.csv")
load(stat133/stat133-fall-2017/data/nba2017-players.csv)
load(/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
getwd()
load('/stat133/stat133-fall-2017/data/nba2017-players.csv')
load('stat133/stat133-fall-2017/data/nba2017-players.csv')
library(readr)
dataset <- read_csv(NULL)
View(dataset)
~/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv
/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv
load(/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv')
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(/stat133/stat133-fall-2017/data/nba2017-players.csv)
load("/stat133/stat133-fall-2017/data/nba2017-players.csv")
load("stat133/stat133-fall-2017/data/nba2017-players.csv")
load("nba2017-players.csv")
getwd()
setwd("/stat133")
setwd("stat133")
getwd()
load("nba2017-players.csv")
load("stat133-fall-2017/data/nba2017-players.csv")
load(stat133-fall-2017/data/nba2017-players.csv)
load(stat133_fall_2017/data/nba2017-players.csv)
load(/stat133_fall_2017/data/nba2017-players.csv)
load('/stat133_fall_2017/data/nba2017-players.csv')
download.file(stat133-fall-2017/data/nba2017-players.csv)
download.file("/stat133-fall-2017/data/nba2017-players.csv")
load('/stat133_fall_2017/data/nba2017-players.csv')
load(/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
getwd()
setwd("/stat133-fall-2017/data")
setwd("stat133-fall-2017/data")
getwd()
load("nba2017-players.csv")
load(nba2017-players.csv)
load('nba2017-players.csv')
load('nba2017-players.csv')
load('nba2017-players.csv')
library(readr)
nba2017_players <- read_csv("~/Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv")
View(nba2017_players)
# import data (assuming file is in your working dir)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
load('nba2017-players.csv')
load("readr")
?load
load(nba2017-players.csv)
load(Desktop/stat133/stat133-fall-2017/data/nba2017-players.csv)
load(data/nba2017-players.csv)
View(nba2017_players)
load(data/nba2017-players.csv)
load(nba2017-players.csv)
load("nba2017-players.csv")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
load("nba2017-players.csv")
load(~nba2017-players.csv)
load(~"nba2017-players.csv")
load(~data/nba2017-players.csv)
load(~/data/nba2017-players.csv)
load(~data/nba2017-players.csv)
load(ggplot2)
install.packages(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
load(ggplot())
load(ggplot2)
load('ggplot2')
load(ggplot2 )
library(ggplot2)
load(file="nba2017-players.csv")
load(ggplot2)
load('ggplot2')
load(ggplot2)
load("nba2017-players.csv")
load("/nba2017-players.csv")
load("nba2017-players.csv")
?ggplot
ggplot()
# Get a scatter plot of `height` and `weight`, for ALL the warriors, displaying
# their names with `geom_label()`
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = height, y = weight)) +
geom_label(aes(label = player))
# Title: "Lab 5: dplyr and ggplot2 basics"
# Subtitle: "Stat 133, Fall 2017"
# Author: "Gaston Sanchez"
# required packages
library(readr)    # for importing data table
library(dplyr)    # for manipulating data frames
library(ggplot2)  # for graphics
# read data file (from working directory)
dat <- read_csv('nba2017-players.csv')
# read data file (e.g. using relative path)
dat <- read_csv('../data/nba2017-players.csv')
# ===============================================
# Verbs: slice(), filter(), and select()
# ===============================================
# use `slice()` to subset the data by selecting the first 5 rows.
slice(dat, 1:5)
# use `slice()` to subset the data by selecting rows 10, 15, 20, ..., 50.
slice(dat, seq(from = 10, to = 50, by = 5))
# use `slice()` to subset the data by selecting the last 5 rows.
slice(dat, (nrow(dat)-4):nrow(dat))
# use `filter()` to subset those players with height less than 70 inches tall.
filter(dat, height < 70)
# use `filter()` to subset rows of Golden State Warriors ('GSW')
filter(dat, team == 'GSW')
# use `filter()` to subset rows of GSW centers ('C')
filter(dat, position == 'C' & team == 'GSW')
# use `filter()` and then `select()`, to subset rows of lakers ('LAL'),
# and then display their names.
lakers <- filter(dat, team == 'LAL')
select(lakers, player)
select(filter(dat, team == 'LAL'), player) # equivalently
# use `filter()` and then `select()`, to display the name and salary,
# of GSW point guards
gsw_pg <- filter(dat, team == 'GSW' & position == 'PG')
select(gsw_pg, player, salary)
select(filter(dat, team == 'GSW' & position == 'PG'), player, salary) # equivalently
# find how to select the name, age, and team, of players with more than 10 years
# of experience, making 10 million dollars or less.
select(
filter(dat, experience > 10 & salary <= 10000000),
player, age, team)
# find how to select the name, team, height, and weight, of rookie players,
# 20 years old, displaying only the first five occurrences (i.e. rows)
slice(
select(
filter(dat, experience == 0 & age == 20),
player, team, height, weight),
1:3
)
# ===============================================
# Verbs: mutate()
# ===============================================
# creating a small data frame step by step
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
# using the data frame 'gsw', add a new variable 'product' with the product of
# height and weight
mutate(gsw, product = height * weight)
# create a new data frame 'gsw3', by adding columns 'log_height' and 'log_weight'
# with the log transformations of height and weight
gsw3 <- mutate(gsw, log_height = log(height), log_weight = log(weight))
gsw3
# use the original dat frame to filter() and arrange() those players with
# height less than 71 inches tall, in increasing order.
arrange(filter(dat, height < 71), height)
# display the name, team, and salary, for the top-5 highest paid players
slice(arrange(select(dat, player, team, salary), desc(salary)), 1:5)
# display the name, team, and points3, of the top 10 three-point players
slice(arrange(select(dat, player, team, points3), desc(points3)), 1:10)
# display the name, position, and minutes, of the top top-3 players
# with most minutes played
slice(arrange(select(dat, player, position, minutes), desc(minutes)), 1:3)
# create a data frame 'gsw_mpg' of GSW players, that contains variables for
# player name, experience, and 'min_per_game' (minutes per game),
# sorted by 'min_per_game' (in descending order)
gsw_mpg <- arrange(
select(
mutate(filter(dat, team == 'GSW'), min_per_game = minutes / games),
player, experience, min_per_game),
desc(min_per_game)
)
gsw_mpg
# ===============================================
# Verbs: mutate()
# ===============================================
# - use `summarise()` to get the largest height value
summarise(dat, max(height))
# - use `summarise()` to get the standard deviation of `points3`
summarise(dat, sd(points3))
# - use `summarise()` and `group_by()` to display the median of three-points,
# by team
summarise(group_by(dat, team), median(points3))
# - display the average triple points by team, in ascending order, of the
# bottom-5 teams (worst 3pointer teams)
slice(
arrange(
summarise(
group_by(dat, team),
avg_pts3 = mean(points3)),
avg_pts3),
1:5
)
# - obtain the mean and standard deviation of `age`, for Power Forwards, with 5
# and 10 years (including) years of experience
summarise(
select(filter(dat, position == 'PF' & experience %in% 5:10),
age),
avg = mean(age),
sd = sd(age)
)
# ===============================================
# First contact with ggplot()
# ===============================================
# scatterplot (option 1)
ggplot(data = dat) +
geom_point(aes(x = points, y = salary))
# scatterplot (option 2)
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point()
# Use the data frame `gsw` to make a scatterplot of `height` and `weight`
ggplot(data = gsw, aes(x = height, y = weight)) +
geom_point()
# Find out how to make another scatterplot of `height` and `weight`,
# using `geom_text()` to display the names of the players
ggplot(data = gsw, aes(x = height, y = weight)) +
geom_point() +
geom_text(aes(label = player))
# Get a scatter plot of `height` and `weight`, for ALL the warriors, displaying
# their names with `geom_label()`
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = height, y = weight)) +
geom_label(aes(label = player))
# their names with `geom_label()`
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = height, y = weight)) +
geom_label(aes(label = player))
ggplot(data = gsw, aes(x = height, y = weight)) +
geom_point() +
geom_text(aes(label = player))
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = height, y = weight)) +
geom_label(aes(label = player))
ggplot(data = dat) +
geom_bar(aes(x = position))
ggplot(data = dat) +
geom_histogram(aes(x = points2), binwidth = 50)
ggplot(data = dat) +
geom_bar(aes(x = position))
ggplot(data=dat, aes(x=position)) + geom_bar()
?geom_smooth
ggplot(
data = filter(dat, position == 'C'),
aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = lm)
ggplot(
data = filter(dat, position == 'C'),
aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = loess)
# Make scatterplots of `experience` and `salary` faceting by `position`
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point(alpha = 0.7) +
facet_wrap(~ position)
?geom_point()
ggplot(data = dat, aes(x = age)) +
geom_density(fill = 'gray') +
facet_wrap(~ team)
ggplot(data=dat) + geom_density(aes(x=age)) + facet_wrap(~team)
ggplot(data = dat, aes(x = height, y = weight)) +
geom_point(alpha = 0.7) +
geom_density2d() +
facet_wrap(~ position)
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = experience, y = salary)) +
geom_point() +
theme_bw()
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = experience, y = salary)) +
geom_point() +
theme_classic()
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = experience, y = salary)) +
geom_point() +
theme_minimal()
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = experience, y = salary)) +
geom_point() +
theme_dark()
ggplot(
data = filter(dat, team == 'GSW'),
aes(x = experience, y = salary)) +
geom_point() +
theme_classic()
?sink()
?plot
plot(dat$height, dat$weight, las = 1, pch = 19,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 2, pch = 19,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 3, pch = 19,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 0, pch = 19,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 0, pch = 19,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 1, pch = 19,
xlab = 'Height', ylab = 'Weight')
?plot
plot(dat$height, dat$weight, las = 1, pch = 19,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 1, pch = 17,
xlab = 'Height', ylab = 'Weight')
plot(dat$height, dat$weight, las = 1, pch = 19,
xlab = 'Height', ylab = 'Weight')
png(filename = '../images/scatterplot2-height-weight.png', pointsize = 20)
?png
hist(dat$age, xlab = 'Age', las = 1, col = 'gray80')
hist(dat$age, xlab = 'Age', las = 1, col = 'gray80')
?ggsave
typeof(1.2)
class(1.2)
class(1)
class("hell")
class(TRUE)
class(i)
class(1i)
?read.csv
?read_csv
?llpy
?ilply
?iiply
?llply
??ddply
?ddply
?join
?melt
?melt
install.packages("reshape")
>melt
?melt
?melt
>dcast
?dcast
